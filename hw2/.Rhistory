library(misctools)
library(miscTools)
library(randomForest)
spam <- read.csv('spambase.data', h=T)
str(spam)
spam <- read.csv('spambase.data', h=F)
str(spam)
spam$one <- factor(spam$V1)
spam$one
spam$c <- factor(spam$V58)
cols <- names(spam)[1]
cols
clf <- randomForest(factor(c) ~ ., data=train[,cols], ntree=20)
clf <- randomForest(factor(c) ~ ., data=spam[,cols], ntree=20)
clf <- randomForest(factor(c) ~ ., data=spam[,V1], ntree=20)
spam[,V1]
str(spam)]
str(spam)
spam[,'V1']
clf <- randomForest(factor(c) ~ ., data=spam[,'V1'], ntree=20)
clf <- randomForest(factor(c) ~ V1, data=spam, ntree=20)
clf
str(spam)
clf <- randomForest(c ~ V1, data=spam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf <- randomForest( ~ V1+V2+V3, data=spam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf
mySpam <- spam[,1:3]
clf <- randomForest(c ~ ., data=mySpam, ntree=20)
clf <- randomForest(spam$c ~ ., data=mySpam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf
spamTrain <- spam[,1:54]
str(spam)
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain)
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=20)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=20)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=50)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=100)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spam[,1:54], ntree=100)
clf
spam[1:20]
spam[1:2]
spam[1:20,]
tSpam <- spam[1:200, ]
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
tSpam
str(tSpam)
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
tSpam[,1:57]
str(tSpam[,1:57])
tSpam[1:200,58]
tSpam[1:500,58]
spam[1:500,58]
spam[1:100,58]
spam[1:1000,58]
spam[,58]
mySpam <- spam[sample(nrows(spam)),]
mySpam <- spam[sample(nrow(spam)),]
mySpam[,58]
library(cvTools)
install.packages('cvTools')
library(cvTools)
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
exit
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
install.packages('robutsbase')
install.packages('robustbase')
install.packages('robustbase')
install.packages('robustbase')
install.packages('cvTools')
library(cvTools)
library(doMC)
install.packages('doMC')
library(doMC)
cols
spam
str(spam)
folds <- cvFolds(nrow(spam), K=10)
folds
nrow(folds)
str(folds)
str(clf)
clf
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
library(randomForest)
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
clf <- randomForest(factor(spam$V58) ~ ., data=spam[,1:54], ntree=20) 
clf
str(clf)
clf.type
clf$type
predict(clf, spam[,1:54])
train <- spam[folds$subsets[folds$which != i], ]
train <- spam[folds$subsets[folds$which != 1], ]
test <- spam[folds$subsets[folds$which == 1], ]
srt(train)
str(train)
str(test)
nrows(train)
nrow(train)
nrow(test)
clf <- randomForest(factor(train$V58) ~ ., data=train[,1:54], ntree=50) 
labels <- predict(clf,test[,1:54])
labels
test[,V54]
test[,'V54']
test[,'V58']
labels
str(labels)
str(spam)
spam[labels]
spam[labels,58]
spam[,58]
labels
str(labels)
labels[1]
labels[2]
labels[1,1]
labels[1][0]
labels[1][1]
labels[1][2]
labels[1][1]
labels[1][1][1]
labels[1][1][1][1]
labels[1,1]
spam[labels]
spam[]
spam[labels,58]
spam[ind==labels,58]
spam[ind==2]
spam[test]
spam[test,58]
test[,58]
list(labels)
labels
pene <- list(labels)
pene[1]
pene[2]
pene[1]
pene[1,3]
pene[1,2]
pene[1,1]
pene[0]
labels[0]
test[58]
labels == test[,58]
diff
??diff
count.fields
count.fields(spam)
setdiff(labels,test[,58])
setdiff(labels,test[,58])
labels == test[,58]
polla <- labels == test[,58]
polla
polla[TRUE]
str(polla)
polla$
asd
polla[<3]
polla[==TRUE]
polla[polla==TRUE]
polla==TRUE
polla
length(polla[polla==TRUE])
length(polla[polla==FALSE])
a <- 5
a
a + 3
a / 7
correct <- length(labels[labels == test[,58]))
correct <- length(labels[labels == test[,58])
correct <- length(labels[labels == test[,58]])
correct
acurracy <- 0
accuracy <- 0
accuracy
accuracy <- accuracy + 1
accuracy <- accuracy + 1
accuracy <- accuracy + 1
accuracy
