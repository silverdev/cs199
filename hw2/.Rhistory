library(misctools)
library(miscTools)
library(randomForest)
spam <- read.csv('spambase.data', h=T)
str(spam)
spam <- read.csv('spambase.data', h=F)
str(spam)
spam$one <- factor(spam$V1)
spam$one
spam$c <- factor(spam$V58)
cols <- names(spam)[1]
cols
clf <- randomForest(factor(c) ~ ., data=train[,cols], ntree=20)
clf <- randomForest(factor(c) ~ ., data=spam[,cols], ntree=20)
clf <- randomForest(factor(c) ~ ., data=spam[,V1], ntree=20)
spam[,V1]
str(spam)]
str(spam)
spam[,'V1']
clf <- randomForest(factor(c) ~ ., data=spam[,'V1'], ntree=20)
clf <- randomForest(factor(c) ~ V1, data=spam, ntree=20)
clf
str(spam)
clf <- randomForest(c ~ V1, data=spam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf <- randomForest( ~ V1+V2+V3, data=spam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf
mySpam <- spam[,1:3]
clf <- randomForest(c ~ ., data=mySpam, ntree=20)
clf <- randomForest(spam$c ~ ., data=mySpam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf
clf <- randomForest(c ~ V1+V2+V3, data=spam, ntree=20)
clf
spamTrain <- spam[,1:54]
str(spam)
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain)
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=20)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=20)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=50)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spamTrain, ntree=100)
clf
clf <- randomForest(factor(spam$V58) ~ ., data=spam[,1:54], ntree=100)
clf
spam[1:20]
spam[1:2]
spam[1:20,]
tSpam <- spam[1:200, ]
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
tSpam
str(tSpam)
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
tSpam[,1:57]
str(tSpam[,1:57])
tSpam[1:200,58]
tSpam[1:500,58]
spam[1:500,58]
spam[1:100,58]
spam[1:1000,58]
spam[,58]
mySpam <- spam[sample(nrows(spam)),]
mySpam <- spam[sample(nrow(spam)),]
mySpam[,58]
library(cvTools)
install.packages('cvTools')
library(cvTools)
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
exit
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
install.packages('cvTools')
install.packages('robutsbase')
install.packages('robustbase')
install.packages('robustbase')
install.packages('robustbase')
install.packages('cvTools')
library(cvTools)
library(doMC)
install.packages('doMC')
library(doMC)
cols
spam
str(spam)
folds <- cvFolds(nrow(spam), K=10)
folds
nrow(folds)
str(folds)
str(clf)
clf
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
library(randomForest)
clf <- randomForest(factor(tSpam$V58) ~ ., data=tSpam[,1:57], ntree=20) 
clf <- randomForest(factor(spam$V58) ~ ., data=spam[,1:54], ntree=20) 
clf
str(clf)
clf.type
clf$type
predict(clf, spam[,1:54])
train <- spam[folds$subsets[folds$which != i], ]
train <- spam[folds$subsets[folds$which != 1], ]
test <- spam[folds$subsets[folds$which == 1], ]
srt(train)
str(train)
str(test)
nrows(train)
nrow(train)
nrow(test)
clf <- randomForest(factor(train$V58) ~ ., data=train[,1:54], ntree=50) 
labels <- predict(clf,test[,1:54])
labels
test[,V54]
test[,'V54']
test[,'V58']
labels
str(labels)
str(spam)
spam[labels]
spam[labels,58]
spam[,58]
labels
str(labels)
labels[1]
labels[2]
labels[1,1]
labels[1][0]
labels[1][1]
labels[1][2]
labels[1][1]
labels[1][1][1]
labels[1][1][1][1]
labels[1,1]
spam[labels]
spam[]
spam[labels,58]
spam[ind==labels,58]
spam[ind==2]
spam[test]
spam[test,58]
test[,58]
list(labels)
labels
pene <- list(labels)
pene[1]
pene[2]
pene[1]
pene[1,3]
pene[1,2]
pene[1,1]
pene[0]
labels[0]
test[58]
labels == test[,58]
diff
??diff
count.fields
count.fields(spam)
setdiff(labels,test[,58])
setdiff(labels,test[,58])
labels == test[,58]
polla <- labels == test[,58]
polla
polla[TRUE]
str(polla)
polla$
asd
polla[<3]
polla[==TRUE]
polla[polla==TRUE]
polla==TRUE
polla
length(polla[polla==TRUE])
length(polla[polla==FALSE])
a <- 5
a
a + 3
a / 7
correct <- length(labels[labels == test[,58]))
correct <- length(labels[labels == test[,58])
correct <- length(labels[labels == test[,58]])
correct
acurracy <- 0
accuracy <- 0
accuracy
accuracy <- accuracy + 1
accuracy <- accuracy + 1
accuracy <- accuracy + 1
accuracy
read.("SMSSpamCollection")
install.packages('tm')
library(tm)
 txt <- system.file("SMSSpamCollection", "txt", package = "tm")
txt
 txt <- system.file("SMSSpamCollection", "", package = "tm")
txt
 txt <- system.file("SMSSpamCollection", "crude", package = "tm")
txt
txt <- system.file("SMSSpamCollection", "crude", package = "tm")
txt
??system.file
readPlain("SMSSpamCollection")
a <- Corpus(DirSource("SMSSpamCollection"), readerControl=list(language='lat'))
a <- Corpus(DirSource("./"), readerControl=list(language='lat'))
summary(a)
a <- Corpus(DirSource("Texts"), readerControl=list(language='lat'))
summary(a)
a
inspect(a)
a <- tm_map(a, removeWords, stopwords("english")
)
a
inspect(a)
a <- tm_map(a, tolower)
a <- tm_map(a, removeWords, stopwords("english")
)
inspect(a)
a <- tm_map(a, stemDocument)
install.packages("SnowballC")
a <- tm_map(a, stemDocument)
a <- tm_map(a, stemDocument, language="english")
inspect(a)
dtm <- DocumentTermMatrix(a)
dtm
inspect(dtm)
nrow(dts)
nrow(dtm)
ncol(dtm)
inspect(a)
??Corpus
data("Texts/SMSSpamCollection")
readLines("Texts/SMSSpamCollection")
x <- readLines("Texts/SMSSpamCollection")
inspect(x)
nrow(x)
ncol(x)
class(x)
x[1:10]
x[,1:10]
x[1:10,]
x[1]
x[2]
c(x)
y <- c(x)
Corpus(VectorSource(y))
a <- Corpus(VectorSource(y))
inspect(a)
x
split(x)
split(x, sep='\t')
??split
split(x, x, sep='\t')
m <- split(x, x, sep='\t')
nrow(m)
ncol(m)

m[1]
m[1,1]
m[1,0]
m[[1]]
m[[1,1]]
m <- strsplit(x, '\t')
m
m[1]
m[1,1]
m[1,0]
class(m)
inspect(m)
nrow(m)
ncol(m)
m[[1]]
m[[1,1]]
m[[1]][1]
m[[1]][2
]
m[1,2]
m[[1,2]]
m[[1]][1]
m[[1]][]
m[[1]][,]
m[[1]]
m[[]][1]
matrix(m)
n <- matrix(m)
nrow(n)
ncol(n)
n[1]
n[1][0]
n[1][1
]
n[1][1]
class(n)
class(m)
do.call(rbind,m)
n <-do.call(rbind,m)
class(n)
ncol(n)
n[1]
n[1,1]
n[1,2]
n[2,1]
n[100,1]
n[150,1]
n[1:10,1:10]
n[1:10,1:2]
m
x <- readLines("Texts/SMSSpamCollection")
y <- c(x)
a <- Corpus(VectorSource(y))
n <-do.call(rbind,a)
ncol(n)
x <- readLines("Texts/SMSSpamCollection")
y <- c(x)
a <- Corpus(VectorSource(y))
m <- strsplit(x, '\t')
n <-do.call(rbind,m)
ncol(n)
x <- readLines("Texts/SMSSpamCollection")
y <- c(x)
a <- Corpus(VectorSource(y))
m <- strsplit(a, '\t')
n <-do.call(rbind,m)
x
a
x <- readLines("Texts/SMSSpamCollection")
m <- strsplit(a, '\t')
n <-do.call(rbind,m)
x <- readLines("Texts/SMSSpamCollection")
m <- strsplit(x, '\t')
n <-do.call(rbind,m)
ncol(n)
n
str(n)
trueLabels <- n[,2]=="ham"
trueLabels
n[,2]
trueLabels <- n[,1]=="ham"
trueLabels
integer(TRUE)
logical(5)
logical(2)
T+0
T+1
F+0
trueLabels+0
trueLabels <- (n[,1]=="ham")+0
trueLabels+0
trueLabels
trueLabels <- (n[,1]=="ham")+0
trueLabels
TRUE==1
TRUE==0
n
n[,2]
y <- n[,2]
a <- Corpus(VectorSource(y))
inspect(a)
status(a)
summary(a)
a[1]
inspect(a[1])
class(m)
corpus <- Corpus(VectorSource(c(msgMatrix[,2])))
# Read all the lines of the document and store them in a vector of characters.
msgChars <- readLines("Texts/SMSSpamCollection")
# Split by tabs since the labels is separated with a \t from the content.
msgList <- strsplit(msgChars, '\t')
# Transform the list into a matrix (do.class() applies the operation to every element in the list).
msgMatrix <- do.call(rbind, msgList)
# Get the labels and convert them to integer.
trueLabels <- (msgMatrix[,1]=="ham") + 0 # Add 0 to convert from logical to int.
# Create the corpus data only the content of the mails (one document per line).
corpus <- Corpus(VectorSource(c(msgMatrix[,2])))
corpus
inspect(corpus)
corpus <- tm_map(corpus, tolower)
inspect(corpus)
corpus <- tm_map(corpus, removeWords, stopwords("english")
)
inspect(corpus)
corpus <- tm_map(a, stemDocument, language="english")
inspect(corpus)
# Create the corpus data only the content of the mails (one document per line).
corpus <- Corpus(VectorSource(c(msgMatrix[,2])))
# Everything to lower case.
corpus <- tm_map(corpus, tolower)
# Remove stop words (case sensitive).
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Stem the document words, i.e., reduce them to the root.
# Requires package SnowballC.
corpus <- tm_map(corpus, stemDocument, language="english")
inspect(corpus)
corpus <- tm_map(corpus, stripWhitespace)
inspect(corpus)
# Create the corpus data only the content of the mails (one document per line).
corpus <- Corpus(VectorSource(c(msgMatrix[,2])))
# Remove extra whitespaces.
corpus <- tm_map(corpus, stripWhitespace)
# Everything to lower case.
corpus <- tm_map(corpus, tolower)
# Remove stop words (case sensitive).
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Stem the document words, i.e., reduce them to the root.
# Requires package SnowballC.
corpus <- tm_map(corpus, stemDocument, language="english")
inspect(corpus)
corpus <- tm_map(corpus, stripWhitespace)
inspect(corpus)
DocumentTermMatrix(corpus)
dtm <- DocumentTermMatrix(corpus)
dtm
nrow(dtm)
ncol(dtm)
dtm[1:10,1:10]
inspect(dtm[1:10,1:10])
inspect(dtm[1:10,10:20])
inspect(dtm[1:10,10:200])
inspect(dtm["shit])
"
"
inspect(dtm["shit"])

inspect(dtm["shah"])
dtm["shah"]
dtm[,"shah"]
dtm[,]
dtm$names
names(dtm)
dtm$dimnames
tm_map(corpus, removePunctuation, preserve_intra_word_dashes=T)
corpus <- tm_map(corpus, removePunctuation, preserve_intra_word_dashes=T)
inspect(corpus)
dtm <- DocumentTermMatrix(corpus)
dtm$dimnames
getTransformations
getTransformations()
# Create the corpus data only the content of the mails (one document per line).
corpus <- Corpus(VectorSource(c(msgMatrix[,2])))
# Remove punctuation symbols.
corpus <- tm_map(corpus, removePunctuation, preserve_intra_word_dashes=T)
# Everything to lower case.
corpus <- tm_map(corpus, tolower)
# Remove stop words (case sensitive).
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Stem the document words, i.e., reduce them to the root.
# Requires package SnowballC.
corpus <- tm_map(corpus, stemDocument, language="english")
# Remove extra whitespaces.
corpus <- tm_map(corpus, stripWhitespace)
inspect(corpus)
dtm <- DocumentTermMatrix(corpus)
dtm$dimnames
inspect(dtm[1:10,10:40])
inspect(dtm[1:10,100:400])
inspect(dtm[1:100,100:400])
inspect(dtm[dtm[dtm > 0],])
inspect(dtm[dtm[> 0],])
inspect(dtm[dtm[dtm > 0],])
dtm[dtm>0]
dtm[dtm>0,]
class(dtm)
matrix(dtm)
type(dtm)
typeof(dtm)
wordMatrix <- as.data.frame( t(as.matrix(dtm)) )
str(wordMatrix)
ncol(wordMatrix)
nrow(wordMatrix)
t(wordMatrix)
wordMatrix <- as.data.frame( as.matrix(dtm) )
ncol(wordMatrix)
nrow(wordMatrix)
wordMatrix$zyada
wordMatrix$hello
wordMatrix > 0
(wordMatrix > 0)+0
freqMatrix <- as.data.frame( as.matrix(dtm) )
presMatrix <- (freqMatrix > 0) + 0
presMatrix[5574]
presMatrix[5574,]
presMatrix[5574,"rolf"]
presMatrix[5574,"rofl"]
presMatrix[5574,"true"]
presMatrix[5574,"false"]
presMatrix[5574,"name"]
